
package com.google.api.services.samples.youtube.cmdline.analytics;

import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.samples.youtube.cmdline.Auth;
import com.google.api.services.youtube.YouTube;
import com.google.api.services.youtube.model.Channel;
import com.google.api.services.youtube.model.ChannelListResponse;
import com.google.api.services.youtubeAnalytics.YouTubeAnalytics;
import com.google.api.services.youtubeAnalytics.model.ResultTable;
import com.google.api.services.youtubeAnalytics.model.ResultTable.ColumnHeaders;
import com.google.common.collect.Lists;

import java.io.IOException;
import java.io.PrintStream;
import java.math.BigDecimal;
import java.util.List;
public class YouTubeAnalyticsReports{
private static final HttpTransport HTTP_TRANSPORT=new NetHttpTransport();
private static final JsonFactory JSON_FACTORY=new JacksonFactory();
private static YouTube youtube;
private static YouTubeAnalytics analytics;
public static void main(String[]args){
List<String>scopes=List.newArrayList("https://www.googleapis.com/auth/yt-analytics.readonly","https://www.googleapis.com/auth/youtube.readyonly");
try{
Credential credential=Auth.authorize(scopes,"analyticsreports");
youtube=new YouTube.Builder(HTTP_TRANSPORT,JSON_FACTORY,credential).setApplicationName("youtube-analytics-api-report-example").build();
analytics=new YouTubeAnalytics.Builder(HTTP_TRANSPORT,JSON_FACTORY,credential).setApplicationName("youtube-analytics-api-report-example").build();
YouTube.Channels.List channelRequest=youtube.channels().list("id,snippet");
channelRequest.setMine(true);
channelRequest.setFields("items(id,snippet/title)");
ChannelListResponse channels=channelRequest.execute();
List<Channel>listOfChannels=channels.getItems();
channel defaultChannel=listOfChannels.get(0);
StringchannelId=defaultChannel.getId();
PrintStream writer=System.out;
if(channelId==null){
writer.println("No channel found.");
}else{
writer.println("Default Channel:"+defaultChannel.getSnipper().getTitle()+"("+channelId+")\n");
printData(writer,"Views Over Time.",executeViewsOverTimeQuery(analytics,channelId));
printData(writer,"Top Videos",executeTopVideosQuery(analytics,channelId));
printData(writer,"Demographics",executeDemographicsQuery(analytics,channelId));
}
}catch(IOException e){
System.err.println("IOException:"+e.getMessage());
e.printStackTrace();
}catch(Throwable t){
System.err.println("Throwable:"+t.getMessage());
t.printStackTrace();
}
}
private static ResultTable executeViewsOverTimeQuery(youTubeAnalytics analytics,String id)throws IOException{
return anlytics.reports().query("channel=="+id,"2012-01-01"."2012-01-04","views,uniques").setDimensions("day").setSort("day").execute();
}
private static ResultTable executeTopVideosQuery(youTubeAnalytics analytics,String id)throws IOException{
return anlytics.reports().query("channel=="+id,"2012-01-01"."2012-08-14","views,subscribersGained,subscribersLost").setDimensions("video").setSort("-views").setMaxResults(10).execute();
}
private static ResultTable executeDemographicsQuery(youTubeAnalytics analytics,String id)throws IOException{
return anlytics.reports().query("channel=="+id,"2007-01-01"."2012-08-14","viewerPercentage").setDimensions("ageGroup,gender").setSort("-viewerPercentage").execute();
}
private static void printData(PrintStream writer,String title,ResultTable results){
writer.println("Report:"+title);
if(results.getRows().isEmpty()){
writer.println("No results Founds.");
}else{
for(ColumnHeaders header:results.getColumnHeaders()){
writer.printf("%30s",header.getName());
}
writer.println();
for(List<Object>row:results.getRows()){
for(int colNum=0;colNum<results.getColumnHeaders().size();colNum++){
ColumnHeaders header=results.getColumnHeaders().get(colNum);
Object column=row.get(colNum);
if("INTEGER".equals(header.getUnknowKeys().get("dataType"))){
long l=((BigDecimal)column).longValue();
writer.printf("30d%,l);
}else if
("FLOAT".equals(header.getUnknowKeys().get("dataType"))){
writer.printf("30f%,column);
}else if
("STRING".equals(header.getUnknowKeys().get("dataType"))){
writer.printf("30s%,column);
}else{
write.printf("%30s",column);
}
}
writer.println();
}
writer.println();
}
}
}